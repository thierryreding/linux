# SPDX-License-Identifier: GPL-2.0
%YAML 1.2
---
$id: http://devicetree.org/schemas/net/snps,dwc-qos-ethernet.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: Synopsys DWC Ethernet QoS IP version 4.10 driver (GMAC)

maintainers:
  - Thierry Reding <thierry.reding@gmail.com>
  - Jon Hunter <jonathanh@nvidia.com>

description:
  This binding is deprecated, but it continues to be supported, but new
  features should be preferably added to the stmmac binding document.

  This binding supports the Synopsys Designware Ethernet QoS (Quality Of
  Service) IP block. The IP supports multiple options for bus type,
  clocking and reset structure, and feature list. Consequently, a number
  of properties and list entries in properties are marked as optional,
  or only required in specific HW configurations.

properties:
#  compatible:
#    const: snps,dwc-qos-ethernet-4.10

#  clocks:
#    description: |
#      Note: Support for additional IP configurations may require adding
#      the following clocks to this list in the future: clk_rx_125_i,
#      clk_tx_125_i, clk_pmarx_0_i, clk_pmarx1_i, clk_rmii_i,
#      clk_revmii_rx_i, clk_revmii_tx_i.

#      Configurations exist where multiple similar clocks are used at
#      once, e.g. all of clk_rx_125_i, clk_pmarx_0_i, clk_pmarx1_i. For
#      this reason it is best to extend the binding with a separate
#      clock-names entry for each of those RX clocks, rather than
#      repurposing the existing "rx" clock-names entry as a generic/
#      logical clock in a similar fashion to "master_bus" and
#      "slave_bus". This will allow easy support for configurations that
#      support multiple PHY interfaces using a mux, and hence need to
#      have explicit control over specific RX clocks.
#    items:
#      - description: The EQOS transmit path clock. The HW signal name is
#          clk_tx_i. In some configurations (e.g. GMII/RGMII), this clock
#          also drives the PHY TX path. In other configurations, other
#          clocks (such as tx_125, rmii) may drive the PHY TX path.
#      - description: The EQOS receive path clock. The HW signal name is
#          clk_rx_i. In some configurations (e.g. GMII/RGMII), this clock
#          is derived from the PHY's RX clock output. In other
#          configurations, other clocks (such as rx_125, rmii) may drive
#          the EQOS RX path.

#          In cases where the PHY clock is directly fed into the EQOS
#          receive path without intervening logic, the DT need not
#          represent this clock, since it is assumed to be fully under
#          the control of the PHY device/driver. In cases where SoC
#          integration adds additional logic to this path, such as a SW-
#          controlled clock gate, this clock should be represented in DT.
#      - description: The CPU/slave-bus (CSR) interface clock. This
#          applies to any bus type; APB, AHB, AXI, etc. The HW signal
#          name is hclk_i (AHB) or clk_csr_i (other buses).
#      - description: The master bus interface clock. Only required in
#          configurations that use a separate clock for the master and
#          slave bus interfaces. The HW signal name is hclk_i (AHB) or
#          aclk_i (AXI).
#      - description: The PTP reference clock. The HW signal name is
#          clk_ptp_ref_i.
#      - description: This clock is deprecated and should not be used by
#          new compatible values. It is equivalent to "tx".
#      - description: This clock is deprecated and should not be used by
#          new compatible values. It is equivalent to "slave_bus".

#  clock-names:
#    items:
#      - const: tx
#      - const: rx
#      - const: slave_bus
#      - const: master_bus
#      - const: ptp_ref
#      - const: phy_ref_clk
#      - const: apb_pclk

#  interrupts:
#    description: Should contain the core's combined interrupt signal.

  dma-coherent: true

  phy-reset-gpios:
    description: phandle and specifier for any GPIO used to reset the PHY

  snps,en-lpi:
    $ref: /schemas/types.yaml#/definitions/flag
    description: If present it enables use of the AXI low-power
      interface.

  snps,write-requests:
    $ref: /schemas/types.yaml#/definitions/uint32
    description: Number of write requests that the AXI port can issue.
      It depends on the SoC configuration.

  snps,read-requests:
    $ref: /schemas/types.yaml#/definitions/uint32
    description: Number of read requests that the AXI port can issue.
      It depends on the SoC configuration.

  snps,burst-map:
    $ref: /schemas/types.yaml#/definitions/uint32
    description: Bitmap of allowed AXI burst lengts, with the LSB
      representing 4, then 8 etc.

  snps,txpbl:
    $ref: /schemas/types.yaml#/definitions/uint32
    description: DMA Programmable burst length for the TX DMA

  snps,rxpbl:
    $ref: /schemas/types.yaml#/definitions/uint32
    description: DMA Programmable burst length for the RX DMA

  snps,en-tx-lpi-clockgating:
    $ref: /schemas/types.yaml#/definitions/flag
    description: Enable gating of the MAC TX clock during TX low-power
      mode.

  mdio:
    $ref: mdio.yaml#

allOf:
  - $ref: ethernet-controller.yaml#

additionalProperties: true

# examples:
#   - |
#     #include <dt-bindings/gpio/gpio.h>
#
#     ethernet2@40010000 {
#         clock-names = "phy_ref_clk", "apb_pclk";
#         clocks = <&clkc 17>, <&clkc 15>;
#         compatible = "snps,dwc-qos-ethernet-4.10";
#         interrupt-parent = <&intc>;
#         interrupts = <0x0 0x1e 0x4>;
#         reg = <0x40010000 0x4000>;
#         phy-handle = <&phy2>;
#         phy-mode = "gmii";
#         phy-reset-gpios = <&gpioctlr 43 GPIO_ACTIVE_LOW>;
#
#         snps,en-tx-lpi-clockgating;
#         snps,en-lpi;
#         snps,write-requests = <2>;
#         snps,read-requests = <16>;
#         snps,burst-map = <0x7>;
#         snps,txpbl = <8>;
#         snps,rxpbl = <2>;
#
#         dma-coherent;
#
#         mdio {
#             #address-cells = <0x1>;
#             #size-cells = <0x0>;
#             phy2: phy@1 {
#                     compatible = "ethernet-phy-ieee802.3-c22";
#                     device_type = "ethernet-phy";
#                     reg = <0x1>;
#             };
#         };
#     };
